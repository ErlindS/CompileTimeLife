#include <array>
#include <cstddef>
#include <string_view>
#include <algorithm>
#include <vector>
#include <iostream>

#define LEN 9
#define WID 9
#define SIZE LEN * WID

//TODO add a way to change to topology of given project

//TODO would be nice to add dieffent kind of neighbours this is a first step
struct Neighbourhood8{
    using Dir = std::array<int, 2>;
    std::vector<Dir> directions = {
                                    {-1, 1},  {0, 1},  {1, 1},
                                    {-1, 0},  {0, 0},  {1, 0},
                                    {-1, -1}, {0, -1}, {1, -1}
                                  };
};


using Array2d = std::array<std::array<int, LEN>, WID>;


std::ostream& operator<<(std::ostream& os, Array2d const& grid){
    for(std::size_t i = 0; i < LEN; ++i){
        for(std::size_t ii = 0; ii < WID; ++ii){
            os << grid[i][ii] << " ";
        }
        os << '\n';
    }
    return os;
}

struct Gamefield{
    using Dir = std::array<int, 2>;
    //Would be nice to pass different directions/Neighbourhood-types (4,8,20) into the iterator
    //template<typename NeighbourhoodCount>
    struct Neighbourhood {
        struct iterator {
            Neighbourhood const* parent;
            std::size_t current_position;
            iterator& operator++(){
                //TODO: rethink the <8
                ++current_position;
                if(current_position > 9) current_position = 0;
                return *this;
            }

            //TODO Explain why friend is necessary
            friend
            bool operator!=(iterator a, iterator b){
                return a.current_position != b.current_position;
            }

            int operator*() const{
                int x = parent->directions[current_position][0] + parent->position[0];
                int y = parent->directions[current_position][1]*-1 + parent->position[1];
                //std::cout << x << " " << y << "this are the x and the y coordinates\n" ;

                if (x < 0 || y < 0 || x >= LEN || y >= WID) return 0;
                //std::cout << parent->parent->data[x][y];

                return parent->parent->data[y][x];
            }

        };

        Gamefield const*       parent;
        std::array<int, 2>     position;
        const std::vector<Dir> directions = {
            {-1, 1},  {0, 1},  {1, 1},
            {-1, 0},  {0, 0},  {1, 0},
            {-1, -1}, {0, -1}, {1, -1}
        };

        iterator begin() const {
            return iterator{this, 0};
        }

        iterator end() const {
            return iterator{this, 9};
        }

        //TODO a outofbound/isvalid check
    };

    //Display data
    friend
    std::ostream& operator<<(std::ostream& os, Gamefield const& grid){
        for(std::size_t i = 0; i < LEN; ++i){
            for(std::size_t ii = 0; ii < WID; ++ii){
                os << grid.data[i][ii];
            }
            os << '\n';
        }
        return os;
    }

    //Here is the data
    Array2d& data;
    //TODO remove

    constexpr Neighbourhood neighbour(int x, int y) {
        return Neighbourhood{this, std::array<int, 2>{x, y}};
    }

    constexpr int evaluates_neighbours(int x, int y) {
        //int a[9] = {0};
        //int arcounter = 0;
        int counter = 0;
        int returvalue = 0;
        Neighbourhood n = neighbour(x,y);
        for (auto it = n.begin(); it != n.end(); ++it) {

                //a[arcounter] = *(it);
                //arcounter++;
                counter += *(it);
        }
        //arcounter = 0;
        //std::cout<< "-------- neighbourhood:";
        //for(int i = 0; i< 9; i++){
        //    std::cout << a[i];
        //}
        //std::cout << '\n';
        //TODO one iteration step does work not multiple because the update does not seem to work
        //TODO add to this place your rules, which you like to add
        //TODO evolve through rules and not strough a static Neighbourhoodmethod
        if(counter == 3) return 1;
        return 0;
    }

    //constexpr
    //This is possible way to solve the iteration through the Gamefield
    //Solution 1
    void Iterate(Array2d& data, int counter) {
        Array2d data2;
        for(int k = 0; k < counter; --counter){
            std::cout << "this is data\n" << "-----------------------------------------\n";
            std::cout << data;
            std::cout << "-----------------------------------------\n";

            for(int i = 0; i < LEN; ++i){
                for(int j = 0; j < LEN; ++j){
                    data2[i][j] = evaluates_neighbours(j,i);
                }
                //std::cout << '\n';
            }

            //std::cout << "this is data2\n" << "-----------------------------------------\n";
            //std::cout << data2;
            //std::cout << "-----------------------------------------\n";

            data = data2;
        }
    }

    //Solution 2
    //template<std::size_t counter>
    //const Array2d data_s2 = data_s2<counter - 1>;

    //int add(int a, int b){
    //    return a+b;
    //}

    //Solution 3
    //Folds
    //template<typename... Args>
    //int foldAdd(Args... args) {
    //    return (add(args, 0) + ...);
    //}

};



int main(){
    std::array<std::array<int, LEN>, WID> gamefield_data2
    {{
        {0,0,1,0,1,0,1,0,1},
        {1,0,0,1,0,1,0,0,0},
        {0,0,1,1,0,1,1,0,1},
        {0,0,0,1,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,1},
        {0,0,1,1,0,1,1,0,0},
        {0,0,1,1,0,1,1,0,1},
        {1,0,0,1,0,1,0,0,0},
        {0,0,1,0,1,0,1,0,1},
    }};

    std::cout << "This is the orginal Grid\n" ;
    Gamefield gamefield{gamefield_data2};
    std::cout << gamefield;
    std::cout << "-----------------------------------------\n";


    gamefield.Iterate(gamefield_data2, 4);
}
//größe des Spielfeldes, Regeln, iteratoren, Topologie
